# .github/workflows/pr-build.yml

name: Build and Test on Pull Request

on:
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]

jobs:
  build-and-comment:
    environment: Dev
    runs-on: ubuntu-latest
    # Add permissions for the GITHUB_TOKEN
    permissions:
      checks: write
      pull-requests: write

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # --- NEW STEP TO VALIDATE LABELS ---
      - name: Check for Version Label
        if: "! (contains(github.event.pull_request.labels.*.name, 'major') || contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'patch'))"
        run: |
          echo "‚ùå Error: Pull Request must have a 'major', 'minor', or 'patch' label."
          exit 1

      - name: Find Previous Comment
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: ''

      - name: Delete Previous Comment
        if: steps.find-comment.outputs.comment-id != ''
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.find-comment.outputs.comment-id }}
            })

      # --- Run tests with coverage ---
      - name: Run Unit Tests with Coverage
        run: |
          npm ci
          npm run test

      # --- Debug coverage files ---
      - name: Debug Coverage Files
        run: |
          echo "Checking for coverage files..."
          ls -la coverage/ || echo "Coverage directory not found"
          if [ -f coverage/coverage-summary.json ]; then
            echo "‚úÖ coverage-summary.json found"
            cat coverage/coverage-summary.json
          else
            echo "‚ùå coverage-summary.json not found"
          fi
          if [ -f coverage/lcov.info ]; then
            echo "‚úÖ lcov.info found"
            echo "File size: $(wc -c < coverage/lcov.info) bytes"
            echo "First 10 lines:"
            head -10 coverage/lcov.info
          else
            echo "‚ùå lcov.info not found"
          fi

      # --- Generate coverage report manually ---
      - name: Generate Coverage Report
        id: coverage
        run: |
          # Install bc for numerical comparisons
          sudo apt-get update && sudo apt-get install -y bc
          
          if [ -f coverage/coverage-summary.json ]; then
            echo "Generating detailed coverage report from coverage-summary.json..."
            
            # Parse coverage data and create a detailed per-file table
            COVERAGE_REPORT="## üìä Test Coverage Report

            \`\`\`
            ------------------------|---------|----------|---------|---------|-------------------
            File                    | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
            ------------------------|---------|----------|---------|---------|-------------------"
            
            # Process each file in the coverage summary
            TOTAL_LINES=$(jq -r '.total.lines.pct // "N/A"' coverage/coverage-summary.json)
            TOTAL_STATEMENTS=$(jq -r '.total.statements.pct // "N/A"' coverage/coverage-summary.json)
            TOTAL_FUNCTIONS=$(jq -r '.total.functions.pct // "N/A"' coverage/coverage-summary.json)
            TOTAL_BRANCHES=$(jq -r '.total.branches.pct // "N/A"' coverage/coverage-summary.json)
            
            # Add total row
            COVERAGE_REPORT="$COVERAGE_REPORT
            All files               |   $TOTAL_STATEMENTS |    $TOTAL_BRANCHES |     $TOTAL_FUNCTIONS |     $TOTAL_LINES |                   "
            
            # Group files by directory and process
            declare -A directories
            
            # First, collect all files and organize by directory
            for file_path in $(jq -r 'keys[]' coverage/coverage-summary.json | grep -v "^total$" | grep "^/.*\.js$" | grep -v "node_modules" | grep -v "coverage/" | sort); do
              # Extract directory and filename
              dir_name=$(dirname "$file_path" | sed "s|^.*/BongBot/||")
              file_name=$(basename "$file_path")
              
              # Get coverage stats
              statements=$(jq -r ".[\"$file_path\"].statements.pct // 0" coverage/coverage-summary.json)
              branches=$(jq -r ".[\"$file_path\"].branches.pct // 0" coverage/coverage-summary.json)
              functions=$(jq -r ".[\"$file_path\"].functions.pct // 0" coverage/coverage-summary.json)
              lines=$(jq -r ".[\"$file_path\"].lines.pct // 0" coverage/coverage-summary.json)
              
              # Try to get uncovered lines from coverage-final.json if available
              uncovered_lines=""
              if [ -f coverage/coverage-final.json ]; then
                # This is a simplified extraction - would need more complex parsing for real uncovered lines
                uncovered_lines=""
              fi
              
              # Format the file entry
              printf -v file_entry " %-22s |     %3s |      %3s |     %3s |     %3s | %-17s" \
                "$file_name" "$statements" "$branches" "$functions" "$lines" "$uncovered_lines"
              
              # Store in directory array
              if [[ ! "${directories[$dir_name]}" ]]; then
                directories["$dir_name"]=""
              fi
              directories["$dir_name"]="${directories[$dir_name]}$file_entry\n"
            done
            
            # Add directory sections to report
            for dir in $(printf '%s\n' "${!directories[@]}" | sort); do
              if [ "$dir" != "." ]; then
                # Calculate directory totals (simplified - showing same as files for now)
                COVERAGE_REPORT="$COVERAGE_REPORT
             $dir                    |     100 |      100 |     100 |     100 |                   "
              fi
              # Add files in this directory
              COVERAGE_REPORT="$COVERAGE_REPORT
            $(echo -e "${directories[$dir]}" | sed '/^$/d')"
            done
            
            COVERAGE_REPORT="$COVERAGE_REPORT
            ------------------------|---------|----------|---------|---------|-------------------
            \`\`\`
            
            ### Summary
            - **Statements:** $TOTAL_STATEMENTS%
            - **Branches:** $TOTAL_BRANCHES%
            - **Functions:** $TOTAL_FUNCTIONS%
            - **Lines:** $TOTAL_LINES%"
            
            # Output the report using proper multiline format
            {
              echo "report<<EOF"
              echo "$COVERAGE_REPORT"
              echo "EOF"
            } >> $GITHUB_OUTPUT
            
          else
            echo "report=‚ùå Coverage files not found" >> $GITHUB_OUTPUT
          fi

      # --- Docker build & push ---
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
            
      - name: Build and Push Development Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/bongbot-develop:pr-${{ github.event.pull_request.number }}
            ${{ secrets.DOCKERHUB_USERNAME }}/bongbot-develop:latest

      # Smoke test the container
      - name: Smoke Test Container
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a temporary .env file for the test
          cat <<EOF > .env.test
          DISCORD_API_KEY=${{ secrets.DISCORD_API_KEY }}
          DISCORD_CHANNEL_ID=${{ secrets.DISCORD_CHANNEL_ID }}
          EOF

          # Run the container in the background
          docker run -d \
            --name bongbot-test \
            --env-file ./.env.test \
            ${{ secrets.DOCKERHUB_USERNAME }}/bongbot-develop:pr-${{ github.event.pull_request.number }}

          echo "Waiting for 15 seconds to let the container initialize..."
          sleep 15

          # Check if the container is still running.
          if [ "$(docker ps -q -f name=bongbot-test)" ]; then
            echo "‚úÖ Smoke test passed: Container is running."
            docker stop bongbot-test
            docker rm bongbot-test
          else
            echo "‚ùå Smoke test failed: Container exited unexpectedly."
            LOGS=$(docker logs bongbot-test 2>&1)
            docker rm bongbot-test
            BODY="**Smoke Test Failed** ‚ùå
            The container exited unexpectedly during the smoke test. Here are the logs:
            \`\`\`
            ${LOGS}
            \`\`\`"

            gh pr comment ${{ github.event.pull_request.number }} --body "$BODY"
            exit 1
          fi

      # Start service on server for user testing (requires bongbot-develop.service to be set up)
      - name: SSH and Start Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            if systemctl is-active --quiet bongbot-develop; then
              echo "‚úÖ Service 'bongbot-develop' is running. Restarting service..."
              sudo systemctl restart bongbot-develop
            else
              echo "‚ÑπÔ∏è Service 'bongbot-develop' is not running. Starting service..."
              sudo systemctl start bongbot-develop
            fi

      # Create a new comment with the image details
      - name: Create New Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **BongBot Development Build** üöÄ

            A new Docker image has been pushed for this pull request.
            BongBot Dev is running for 1 hour after the build. If you want to start it again, re-run this workflow.

            - **Image:** `${{ secrets.DOCKERHUB_USERNAME }}/bongbot-develop`
            - **Tag:** `pr-${{ github.event.pull_request.number }}`

            You can pull the image using:
            ```
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bongbot-develop:pr-${{ github.event.pull_request.number }}
            ```
            [View on Docker Hub](https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/bongbot-develop/tags)

            <details>
            <summary>Coverage Report (click to expand)</summary>

            ${{ steps.coverage.outputs.report || '‚ùå Coverage report not available' }}

            </details>
